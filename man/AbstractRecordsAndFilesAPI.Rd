% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AbstractRecordsAndFilesAPI.R
\name{AbstractRecordsAndFilesAPI}
\alias{AbstractRecordsAndFilesAPI}
\title{An Abstract R6 Class for Endpoints with a \code{file} field}
\value{
A AbstractRecordsAndFilesAPI object
}
\description{
An R6 class to interact with both the records, and the
data stored in the \code{file} field. The return for this class must be
records, against the \verb{/export} endpoint when \code{retrieve_files} is FALSE.
When \code{retrieve_files} is true, the storr cache should be checked first.
If the file doesn't exist there, it should be retrieved from the database
against the \verb{/record_table_and_files} endpoint. The file should be a
tarball with the metadata.csv and the file associated with the record,
where the file is named according to the \code{id} field in metadata.csv.
data files should be \code{.csv.gz}
}
\seealso{
Other API: 
\code{\link{AbstractAPI}},
\code{\link{AbstractRecordsOnlyAPI}},
\code{\link{BindingManualQCAPI}},
\code{\link{DataSourceAPI}},
\code{\link{ExpressionAPI}},
\code{\link{ExpressionManualQCAPI}},
\code{\link{FileFormatAPI}},
\code{\link{GenomicFeatureAPI}},
\code{\link{PromoterSetSigAPI}},
\code{\link{RankResponseAPI}},
\code{\link{RegulatorAPI}}
}
\concept{API}
\section{Super class}{
\code{yeastCCDBShiny::AbstractAPI} -> \code{AbstractRecordsAndFilesAPI}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-AbstractRecordsAndFilesAPI-new}{\code{AbstractRecordsAndFilesAPI$new()}}
\item \href{#method-AbstractRecordsAndFilesAPI-read}{\code{AbstractRecordsAndFilesAPI$read()}}
\item \href{#method-AbstractRecordsAndFilesAPI-clone}{\code{AbstractRecordsAndFilesAPI$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="create"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-create'><code>yeastCCDBShiny::AbstractAPI$create()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="delete"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-delete'><code>yeastCCDBShiny::AbstractAPI$delete()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="pop_params"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-pop_params'><code>yeastCCDBShiny::AbstractAPI$pop_params()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="push_params"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-push_params'><code>yeastCCDBShiny::AbstractAPI$push_params()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="update"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-update'><code>yeastCCDBShiny::AbstractAPI$update()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AbstractRecordsAndFilesAPI-new"></a>}}
\if{latex}{\out{\hypertarget{method-AbstractRecordsAndFilesAPI-new}{}}}
\subsection{Method \code{new()}}{
Initialize the AbstractRecordsAndFilesAPI object.
This will serve as an interface to an endpoint that can serve
both records and files, and cache the file/retrieve from the cache
if it exists
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AbstractRecordsAndFilesAPI$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{parameters to pass to \code{\link{AbstractAPI}}.
See the new() method section.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AbstractRecordsAndFilesAPI-read"></a>}}
\if{latex}{\out{\hypertarget{method-AbstractRecordsAndFilesAPI-read}{}}}
\subsection{Method \code{read()}}{
Retrieve data from the endpoint according to the
\code{retrieve_files} parameter. If \code{retrieve_files} is FALSE, the
records will be returned as a dataframe. If \code{retrieve_files} is TRUE,
the files associated with the records will be retrieved either from
the local cache or from the database
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AbstractRecordsAndFilesAPI$read(
  callback = function(metadata, data, storr, ...) {
     list(metadata, data)
 },
  retrieve_files = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{callback}}{a function to call with the metadata from the Rank
Response API. The first parameter of the callback must be \code{metadata}.
The callback will be called with the metadata from the Rank Response
API as the first parameter, and any additional parameters passed to
this function as additional parameters.}

\item{\code{retrieve_files}}{Boolean. Whether to retrieve the files associated
with the records retrieved by the GET request according to the params.
Defaults to FALSE.}

\item{\code{...}}{additional parameters to pass to the callback}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AbstractRecordsAndFilesAPI-clone"></a>}}
\if{latex}{\out{\hypertarget{method-AbstractRecordsAndFilesAPI-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AbstractRecordsAndFilesAPI$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
