% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RankResponseAPI.R
\name{RankResponseAPI}
\alias{RankResponseAPI}
\title{RankResponseAPI R6 Class}
\value{
A RankResponseAPI object
}
\description{
Retrieves rank response data from the database.
}
\details{
An R6 class to interact with the Rank Response API.
}
\note{
the parent .is_valid_url is overwritten in this class, and
the Sys.getenv("PROMOTERSETSIG_URL") is used to validate that the
url works and the token is valid. The RankResponse endpoint, as it is
currently written, does not return a response object unless parameters
are passed

Because of the way the rankresponse endpoint is currently set
up, to check whether the header/token is valid, the PROMOTERSETSIG_URL
is used in .is_valid_url(). This should be fixed in the database
endpoint eventually.

RANK_BIN_SIZE by default set at 5 -- it is possible to change
this through this class's paramslist right now, but it isn't
tracked in the cache
}
\seealso{
Other API: 
\code{\link{AbstractAPI}}
}
\concept{API}
\section{Super class}{
\code{yeastCCDBShiny::AbstractAPI} -> \code{RankResponseAPI}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RankResponseAPI-new}{\code{RankResponseAPI$new()}}
\item \href{#method-RankResponseAPI-read}{\code{RankResponseAPI$read()}}
\item \href{#method-RankResponseAPI-clone}{\code{RankResponseAPI$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="create"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-create'><code>yeastCCDBShiny::AbstractAPI$create()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="delete"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-delete'><code>yeastCCDBShiny::AbstractAPI$delete()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="pop_params"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-pop_params'><code>yeastCCDBShiny::AbstractAPI$pop_params()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="push_params"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-push_params'><code>yeastCCDBShiny::AbstractAPI$push_params()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="update"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-update'><code>yeastCCDBShiny::AbstractAPI$update()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RankResponseAPI-new"></a>}}
\if{latex}{\out{\hypertarget{method-RankResponseAPI-new}{}}}
\subsection{Method \code{new()}}{
Initialize the RankResponseAPI object. This will serve
as an interface to the RankResponse endpoint of both the database
and the application cache
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RankResponseAPI$new(url = Sys.getenv("RANKRESPONSE_URL", ""), ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{url}}{the URL of the Rank Response API}

\item{\code{...}}{additional parameters to pass to \code{\link{AbstractAPI}}.
See the new() method section.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RankResponseAPI-read"></a>}}
\if{latex}{\out{\hypertarget{method-RankResponseAPI-read}{}}}
\subsection{Method \code{read()}}{
Retrieve data from the Rank Response API. At least the
\code{promotersetsig_id} must be set in the params. If the \code{expression_id}
is not also set, then all data associated with that
\code{promotersetsig_id}, given any other parameters, will be pulled. The
data will be cached with the <promotersetsig_id>_<experiment_id> as
a key and the table as an R object as a value in this instance's
cache. The metadata from the tarball will be returned, which can
be used to access the data from the cache. It will always be fastest
to check whether the promotersetsig_id/experiment_id sets already
exist in the application cache before calling this function. If they
do, extract that data and only call this on what is missing.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RankResponseAPI$read(
  callback = function(metadata, ...) {
     metadata
 },
  timeout = as.numeric(Sys.getenv("API_TIMEOUT", 60))
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RankResponseAPI-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RankResponseAPI-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RankResponseAPI$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
