% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ExpressionAPI.R
\name{ExpressionAPI}
\alias{ExpressionAPI}
\title{ExpressionAPI R6 Class}
\value{
A ExpressionAPI object
}
\description{
ExpressionAPI R6 Class

ExpressionAPI R6 Class
}
\details{
An R6 class to interact with the ExpressionAPI endpoint.
}
\seealso{
Other API: 
\code{\link{AbstractAPI}},
\code{\link{AbstractRecordsAndFilesAPI}},
\code{\link{AbstractRecordsOnlyAPI}},
\code{\link{BindingManualQCAPI}},
\code{\link{DataSourceAPI}},
\code{\link{ExpressionManualQCAPI}},
\code{\link{FileFormatAPI}},
\code{\link{GenomicFeatureAPI}},
\code{\link{PromoterSetSigAPI}},
\code{\link{RankResponseAPI}},
\code{\link{RegulatorAPI}}
}
\concept{API}
\section{Super class}{
\code{yeastCCDBShiny::AbstractAPI} -> \code{ExpressionAPI}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ExpressionAPI-new}{\code{ExpressionAPI$new()}}
\item \href{#method-ExpressionAPI-read}{\code{ExpressionAPI$read()}}
\item \href{#method-ExpressionAPI-clone}{\code{ExpressionAPI$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="create"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-create'><code>yeastCCDBShiny::AbstractAPI$create()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="delete"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-delete'><code>yeastCCDBShiny::AbstractAPI$delete()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="pop_params"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-pop_params'><code>yeastCCDBShiny::AbstractAPI$pop_params()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="push_params"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-push_params'><code>yeastCCDBShiny::AbstractAPI$push_params()</code></a></span></li>
<li><span class="pkg-link" data-pkg="yeastCCDBShiny" data-topic="AbstractAPI" data-id="update"><a href='../../yeastCCDBShiny/html/AbstractAPI.html#method-AbstractAPI-update'><code>yeastCCDBShiny::AbstractAPI$update()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExpressionAPI-new"></a>}}
\if{latex}{\out{\hypertarget{method-ExpressionAPI-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionAPI$new(url = Sys.getenv("EXPRESSION_URL"), ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExpressionAPI-read"></a>}}
\if{latex}{\out{\hypertarget{method-ExpressionAPI-read}{}}}
\subsection{Method \code{read()}}{
Retrieve data from the expression endpoint. This will
always return the metadata that matches your query -- if no params
are set, then the entire expression table is returned. Setting
the retrieve_files to \code{TRUE} will mean that the data is also retrieved
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionAPI$read(
  callback = function(metadata, data, storr, ...) {
     list(metadata, data)
 },
  retrieve_files = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{callback}}{a function to call with the metadata from the Rank
Response API. The first parameter of the callback must be \code{metadata}.
The callback will be called with the metadata from the Rank Response
API as the first parameter, and any additional parameters passed to
this function as additional parameters.}

\item{\code{retrieve_files}}{Boolean. Whether to retrieve the files associated
with the records retrieved by the GET request according to the params.
Defaults to FALSE.}

\item{\code{...}}{additional parameters to pass to the callback}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ExpressionAPI-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ExpressionAPI-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ExpressionAPI$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
